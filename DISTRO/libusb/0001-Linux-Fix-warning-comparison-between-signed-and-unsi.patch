From 4674b4d137df2e2e49a1057c947888de8f37d6e8 Mon Sep 17 00:00:00 2001
From: Ludovic Rousseau <ludovic.rousseau+github@gmail.com>
Date: Fri, 20 Apr 2012 22:25:38 +0100
Subject: [PATCH 01/28] Linux: Fix warning: comparison between signed and
 unsigned

libusbx.git commit 36a7119bf296cecd4e910bef86908fd782224960
---
 libusb/os/linux_usbfs.c |    8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/libusb/os/linux_usbfs.c b/libusb/os/linux_usbfs.c
index 02d182d..0717fa0 100644
--- a/libusb/os/linux_usbfs.c
+++ b/libusb/os/linux_usbfs.c
@@ -142,7 +142,7 @@ struct linux_transfer_priv {
 
 	enum reap_action reap_action;
 	int num_urbs;
-	unsigned int num_retired;
+	int num_retired;
 	enum libusb_transfer_status reap_status;
 
 	/* next iso packet in user-supplied transfer to be populated */
@@ -1726,7 +1726,7 @@ static int submit_iso_transfer(struct usbi_transfer *itransfer)
 
 	/* calculate how many URBs we need */
 	for (i = 0; i < num_packets; i++) {
-		int space_remaining = MAX_ISO_BUFFER_LENGTH - this_urb_len;
+		unsigned int space_remaining = MAX_ISO_BUFFER_LENGTH - this_urb_len;
 		packet_len = transfer->iso_packet_desc[i].length;
 
 		if (packet_len > space_remaining) {
@@ -1753,7 +1753,7 @@ static int submit_iso_transfer(struct usbi_transfer *itransfer)
 	/* allocate + initialize each URB with the correct number of packets */
 	for (i = 0; i < num_urbs; i++) {
 		struct usbfs_urb *urb;
-		int space_remaining_in_urb = MAX_ISO_BUFFER_LENGTH;
+		unsigned int space_remaining_in_urb = MAX_ISO_BUFFER_LENGTH;
 		int urb_packet_offset = 0;
 		unsigned char *urb_buffer_orig = urb_buffer;
 		int j;
@@ -2335,7 +2335,7 @@ static int op_handle_events(struct libusb_context *ctx,
 	struct pollfd *fds, POLL_NFDS_TYPE nfds, int num_ready)
 {
 	int r;
-	int i = 0;
+	unsigned int i = 0;
 
 	usbi_mutex_lock(&ctx->open_devs_lock);
 	for (i = 0; i < nfds && num_ready > 0; i++) {
-- 
1.7.9.5

